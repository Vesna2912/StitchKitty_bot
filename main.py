print("üêæ StitchKitty –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")


import os
import telebot
print("üì¶ telebot –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")

from telebot import types
from telebot.types import InputMediaPhoto


import json
import threading
import time
from datetime import datetime


from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "–Ø –∂–∏–≤–∞! StitchKitty –æ–Ω–ª–∞–π–Ω üßµ"

def run():
    app.run(host='0.0.0.0', port=9090)


# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
Thread(target=run).start()


TOKEN = '8053271515:AAGUFOJgQm7oosdX2tyRuomsAAGYm_Lk99U'
ADMIN_ID = 1235501707         # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
CHANNEL_ID = -1002298038944  # ID 

bot = telebot.TeleBot(TOKEN)

SP_DATA_FILE = "sp_data.json"
if not os.path.exists(SP_DATA_FILE):
    with open(SP_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({"active_sp": None, "participants": {}, "reports": []}, f)

def load_data():
    with open(SP_DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(SP_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

admin_states = {}

@bot.message_handler(commands=["—Å–æ–∑–¥–∞—Ç—å_—Å–ø"])
def create_sp(message):
    if message.from_user.id != ADMIN_ID:
        return
    admin_states[message.from_user.id] = {"stage": "title"}
    bot.send_message(message.chat.id, "üìå –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –°–ü:")

@bot.message_handler(func=lambda m: admin_states.get(m.from_user.id, {}).get("stage") == "title")
def get_title(message):
    admin_states[message.from_user.id]["title"] = message.text
    admin_states[message.from_user.id]["stage"] = "start_date"
    bot.send_message(message.chat.id, "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.06.2025):")

@bot.message_handler(func=lambda m: admin_states.get(m.from_user.id, {}).get("stage") == "start_date")
def get_start_date(message):
    admin_states[message.from_user.id]["start_date"] = message.text
    admin_states[message.from_user.id]["stage"] = "end_date"
    bot.send_message(message.chat.id, "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:")

@bot.message_handler(func=lambda m: admin_states.get(m.from_user.id, {}).get("stage") == "end_date")
def get_end_date(message):
    admin_states[message.from_user.id]["end_date"] = message.text
    admin_states[message.from_user.id]["stage"] = "description"
    bot.send_message(message.chat.id, "üìù –î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –°–ü:")

@bot.message_handler(func=lambda m: admin_states.get(m.from_user.id, {}).get("stage") == "description")
def get_description(message):
    admin_states[message.from_user.id]["description"] = message.text
    admin_states[message.from_user.id]["stage"] = "start_codeword"
    bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ (–æ–¥–Ω–æ):")

@bot.message_handler(func=lambda m: admin_states.get(m.from_user.id, {}).get("stage") == "start_codeword")
def get_start_codeword(message):
    admin_states[message.from_user.id]["start_codeword"] = message.text.strip()
    admin_states[message.from_user.id]["stage"] = "report_words"
    bot.send_message(message.chat.id, "üçì –í–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

@bot.message_handler(func=lambda m: admin_states.get(m.from_user.id, {}).get("stage") == "report_words")
def get_report_words(message):
    words = [w.strip() for w in message.text.split(",") if w.strip()]
    if not words:
        bot.send_message(message.chat.id, "‚ùóÔ∏è–°–ø–∏—Å–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return
    admin_states[message.from_user.id]["report_codewords"] = words
    admin_states[message.from_user.id]["stage"] = "logo"
    bot.send_message(message.chat.id, "üì∑ –ü—Ä–∏—à–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –°–ü (—Ñ–æ—Ç–æ):")


InputMediaPhoto

user_states = {}
report_states = {}

@bot.message_handler(commands=["–≤—Å—Ç—É–ø–∏—Ç—å_—Å–ø"])
def join_sp(message):
        user_id = str(message.from_user.id)
        data = load_data()

        if not data["active_sp"]:
            bot.send_message(message.chat.id, "‚õîÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –°–ü.")
            return

        # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in user_states and user_id not in data["participants"]:
            del user_states[user_id]

            if user_id in data["participants"]:
                participant = data["participants"][user_id]
                if "start_photo" in participant and participant["start_photo"]:
                    bot.send_message(message.chat.id, "–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–º –°–ü! ‚ù§Ô∏è")
                    return
                else:
                    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî —É–¥–∞–ª–∏–º –∏ —Ä–∞–∑—Ä–µ—à–∏–º —Å–Ω–æ–≤–∞
                    del data["participants"][user_id]
                    save_data(data)


        bot.send_message(message.chat.id, "üëã –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        user_states[user_id] = {"stage": "name"}




@bot.message_handler(func=lambda m: user_states.get(str(m.from_user.id), {}).get("stage") == "name")
def get_name(m):
    user_id = str(m.from_user.id)
    name = m.text.strip()
    user_states[user_id]["name"] = name
    user_states[user_id]["stage"] = "start_photo"

    data = load_data()
    codeword = data["active_sp"]["start_codeword"]

    bot.send_message(m.chat.id, f"{name}, –æ—Ç–ª–∏—á–Ω–æ! ‚ú®\n"
                                f"üîë –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: {codeword}\n"
                                f"üì∏ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.")



@bot.message_handler(commands=["–±—ã–ª–æ"])
def start_report(message):
    user_id = str(message.from_user.id)
    data = load_data()

    if user_id not in data["participants"]:
        bot.send_message(message.chat.id, "–¢—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –°–ü. –ù–∞–ø–∏—à–∏ /–≤—Å—Ç—É–ø–∏—Ç—å_—Å–ø üåº")
        return

    report_states[user_id] = {"stage": "waiting_before"}
    bot.send_message(message.chat.id, "üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ \"–ë—ã–ª–æ\".")

@bot.message_handler(commands=["—Å—Ç–∞–ª–æ"])
def continue_report(message):
    user_id = str(message.from_user.id)
    if user_id not in report_states or report_states[user_id]["stage"] != "waiting_after":
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ \"–ë—ã–ª–æ\" —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /–±—ã–ª–æ.")
        return
    bot.send_message(message.chat.id, "üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ \"–°—Ç–∞–ª–æ\".")

@bot.message_handler(content_types=["photo"])
def handle_photos(message):
    user_id = str(message.from_user.id)

    # —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ
    if user_states.get(user_id, {}).get("stage") == "start_photo":
        data = load_data()
        file_id = message.photo[-1].file_id

        data["participants"][user_id] = {
            "name": user_states[user_id]["name"],
            "start_photo": file_id,
            "reports": []
        }
        save_data(data)
        del user_states[user_id]

        bot.send_message(message.chat.id, f"‚ú® –°–ø–∞—Å–∏–±–æ, {data['participants'][user_id]['name']}!\n"
      f"–¢—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∞ –≤ –°–ü: *{data['active_sp']['title']}*.", parse_mode="Markdown")

        return

    # —Ñ–æ—Ç–æ –¥–ª—è "–±—ã–ª–æ/—Å—Ç–∞–ª–æ"
    if user_id in report_states:
        photo_id = message.photo[-1].file_id
        data = load_data()

        if report_states[user_id]["stage"] == "waiting_before":
            report_states[user_id]["before"] = photo_id
            report_states[user_id]["stage"] = "waiting_after"
            bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ \"–ë—ã–ª–æ\" –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ \"–°—Ç–∞–ª–æ\" —á–µ—Ä–µ–∑ /—Å—Ç–∞–ª–æ.")
        elif report_states[user_id]["stage"] == "waiting_after":
            report_states[user_id]["after"] = photo_id

            participant = data["participants"][user_id]
            active = data["active_sp"]

            report = {
                "user_id": user_id,
                "name": participant["name"],
                "before": report_states[user_id]["before"],
                "after": photo_id,
                "date": datetime.now().strftime("%Y-%m-%d")
            }
            data["reports"].append(report)
            participant["reports"].append(report["date"])
            save_data(data)

            bot.send_message(message.chat.id, f"üì£ –û—Ç—á—ë—Ç –æ—Ç {participant['name']} –ø–æ –°–ü *{active['title']}*:", parse_mode="Markdown")
            media = [
                InputMediaPhoto(report["before"], caption="üìç –ë—ã–ª–æ"),
                InputMediaPhoto(report["after"], caption="‚úÖ –°—Ç–∞–ª–æ")
            ]
            bot.send_media_group(message.chat.id, media)

            del report_states[user_id]


@bot.message_handler(commands=["—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_—Å–ø"])
def send_stats(message):
    if message.from_user.id != ADMIN_ID:
        return
    data = load_data()
    if not data["active_sp"]:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –°–ü.")
        return

    title = data["active_sp"]["title"]
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –°–ü *{title}*:\n\n"
    for uid, participant in data["participants"].items():
        name = participant["name"]
        reports = len(participant["reports"])
        text += f"üîπ {name} ‚Äî {reports} –æ—Ç—á—ë—Ç–æ–≤\n"
    if not data["participants"]:
        text += "‚õîÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏—Ü."
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

@bot.message_handler(commands=["–ø—Ä–æ–≤–µ—Ä–∏—Ç—å_—Å—Ç–∞—Ç—É—Å"])
def check_status(message):
    user_id = str(message.from_user.id)
    msg = f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ ID {user_id}:\n"
    if user_id in user_states:
        msg += "üìå –ï—Å—Ç—å –≤ user_states\n"
    else:
        msg += "‚úîÔ∏è –ù–µ—Ç –≤ user_states\n"

    if user_id in report_states:
        msg += "üìå –ï—Å—Ç—å –≤ report_states\n"
    else:
        msg += "‚úîÔ∏è –ù–µ—Ç –≤ report_states\n"

    data = load_data()
    if user_id in data["participants"]:
        msg += "üìå –ï—Å—Ç—å –≤ participants\n"
    else:
        msg += "‚úîÔ∏è –ù–µ—Ç –≤ participants\n"

    bot.send_message(message.chat.id, msg)


@bot.message_handler(commands=["—Å–±—Ä–æ—Å–∏—Ç—å_—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"])
def reset_registration(message):
    if message.from_user.id != ADMIN_ID:
        return
    if not message.reply_to_message:
        bot.send_message(message.chat.id, "‚ùóÔ∏è–ö–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã.")
        return

    user_id = str(message.reply_to_message.from_user.id)
    if user_id in user_states:
        del user_states[user_id]
        bot.send_message(message.chat.id, f"üóë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_states.")


def daily_check():
    while True:
        try:
            now = datetime.utcnow()
            if now.hour == 10 and now.minute == 0:  # 10:00 UTC ‚Üí 13:00 –ú–°–ö
                data = load_data()
                sp = data.get("active_sp")
                if not sp:
                    continue

                day = now.day
                if day in [14, 29]:
                    index = sp.get("report_index", 0)
                    words = sp.get("report_codewords", [])

                    if index < len(words):
                        code = words[index]
                        for uid, part in data["participants"].items():
                            try:
                                bot.send_message(uid, f"üì£ {part['name']}, –∑–∞–≤—Ç—Ä–∞ –æ—Ç—á—ë—Ç–Ω—ã–π –¥–µ–Ω—å!\n"
                                                      f"üîë –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: *{code}*", parse_mode="Markdown")
                            except:
                                pass
                        sp["report_index"] += 1
                        save_data(data)
            time.sleep(60)
        except Exception as e:
            print("‚ùóÔ∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ:", e)
            time.sleep(60)

# –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
threading.Thread(target=daily_check, daemon=True).start()


print("StitchKitty –°–ü –∑–∞–ø—É—â–µ–Ω!")
bot.polling(none_stop=True)
